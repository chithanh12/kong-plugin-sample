// package main

// import (
// 	"encoding/json"
// 	"fmt"
// 	"github.com/Kong/go-pdk"
// 	"github.com/Kong/go-pdk/server"
// 	jwt_validator "github.com/chithanh12/kong-plugin/jwt-validator"
// 	"regexp"
// )

// type Config struct {
// 	WaitTime int
// 	Secret   string
// }

// func New() interface{} {
// 	return &Config{}
// }

// var (
// 	serviceUrlMap = map[string]string{
// 		"/claim":  "claimservice",
// 		"/policy": "policyservice",
// 	}
// 	rg = regexp.MustCompile("(\\/[^\\/]*).*")
// )

// func (config Config) Access(kong *pdk.PDK) {
// 	_ = kong.Response.SetHeader("x-wait-time", fmt.Sprintf("%d seconds", config.WaitTime))

// 	tokenStr, _ := kong.Request.GetHeader("Authorization")
// 	if tokenStr == "" {
// 		kong.Log.Err("Can get authorization")
// 		kong.Response.Exit(401, "Unauthorized", make(map[string][]string))
// 	}
// 	kong.Log.Debug(fmt.Sprintf("Token = %s", tokenStr))

// 	permissions, err := jwt_validator.VerifyToken(tokenStr)
// 	if err != nil {
// 		kong.Log.Err("Can't get permission", err)

// 		kong.Response.Exit(401, "Unauthorized", make(map[string][]string))
// 	}
// 	path, _ := kong.Request.GetPath()
// 	strPath := rg.ReplaceAllString(path, "$1")
// 	kong.Log.Debug(fmt.Sprintf("String Path = %s", strPath))
// 	if s, ok := serviceUrlMap[strPath]; ok {
// 		p, ok1 := permissions[s]

// 		if !ok1 {
// 			kong.Response.Exit(401, "Unauthorized", make(map[string][]string))
// 			return
// 		}

// 		pp, _ := json.Marshal(p)
// 		_ = kong.Response.SetHeader("x-permission", string(pp))
// 	}
// }

// func main() {
// 	Version := "1.2"
// 	Priority := 1000
// 	_ = server.StartServer(New, Version, Priority)
// }
